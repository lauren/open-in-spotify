// A thing that emits "entry" events with Reader objects
// Pausing it causes it to stop emitting entry events, and also
// pauses the current entry if there is one.
function DirReader(props){var me=this;if(!(me instanceof DirReader))throw new Error("DirReader must be called as constructor.");if(props.type!=="Directory"||!props.Directory)throw new Error("Non-directory type "+props.type);me.entries=null,me._index=-1,me._paused=!1,me._length=-1,props.sort&&(this.sort=props.sort),Reader.call(this,props)}module.exports=DirReader;var fs=require("../../graceful-fs/graceful-fs.js"),fstream=require("../fstream.js"),Reader=fstream.Reader,inherits=require("../../inherits/inherits.js"),mkdir=require("../../mkdirp"),path=require("path"),Reader=require("./reader.js"),assert=require("assert").ok;inherits(DirReader,Reader),DirReader.prototype._getEntries=function(){var me=this;if(me._gotEntries)return;me._gotEntries=!0,fs.readdir(me._path,function(er,entries){function processEntries(){me._length=me.entries.length,typeof me.sort=="function"&&(me.entries=me.entries.sort(me.sort.bind(me))),me._read()}if(er)return me.error(er);me.entries=entries,me.emit("entries",entries),me._paused?me.once("resume",processEntries):processEntries()})},DirReader.prototype._read=function(){var me=this;if(!me.entries)return me._getEntries();if(me._paused||me._currentEntry||me._aborted)return;me._index++;if(me._index>=me.entries.length){me._ended||(me._ended=!0,me.emit("end"),me.emit("close"));return}var p=path.resolve(me._path,me.entries[me._index]);assert(p!==me._path),assert(me.entries[me._index]),me._currentEntry=p,fs[me.props.follow?"stat":"lstat"](p,function(er,stat){function onend(){if(ended)return;ended=!0,me.emit("childEnd",entry),me.emit("entryEnd",entry),me._currentEntry=null,me._paused||me._read()}if(er)return me.error(er);var who=me._proxy||me;stat.path=p,stat.basename=path.basename(p),stat.dirname=path.dirname(p);var childProps=me.getChildProps.call(who,stat);childProps.path=p,childProps.basename=path.basename(p),childProps.dirname=path.dirname(p);var entry=Reader(childProps,stat);me._currentEntry=entry,entry.on("pause",function(who){!me._paused&&!entry._disowned&&me.pause(who)}),entry.on("resume",function(who){me._paused&&!entry._disowned&&me.resume(who)}),entry.on("stat",function(props){me.emit("_entryStat",entry,props);if(entry._aborted)return;entry._paused?entry.once("resume",function(){me.emit("entryStat",entry,props)}):me.emit("entryStat",entry,props)}),entry.on("ready",function EMITCHILD(){if(me._paused)return entry.pause(me),me.once("resume",EMITCHILD);entry.type==="Socket"?me.emit("socket",entry):me.emitEntry(entry)});var ended=!1;entry.on("close",onend),entry.on("disown",onend),entry.on("error",function(er){entry._swallowErrors?(me.warn(er),entry.emit("end"),entry.emit("close")):me.emit("error",er)}),["child","childEnd","warn"].forEach(function(ev){entry.on(ev,me.emit.bind(me,ev))})})},DirReader.prototype.disown=function(entry){entry.emit("beforeDisown"),entry._disowned=!0,entry.parent=entry.root=null,entry===this._currentEntry&&(this._currentEntry=null),entry.emit("disown")},DirReader.prototype.getChildProps=function(stat){return{depth:this.depth+1,root:this.root||this,parent:this,follow:this.follow,filter:this.filter,sort:this.props.sort}},DirReader.prototype.pause=function(who){var me=this;if(me._paused)return;who=who||me,me._paused=!0,me._currentEntry&&me._currentEntry.pause&&me._currentEntry.pause(who),me.emit("pause",who)},DirReader.prototype.resume=function(who){var me=this;if(!me._paused)return;who=who||me,me._paused=!1,me.emit("resume",who);if(me._paused)return;me._currentEntry?me._currentEntry.resume&&me._currentEntry.resume(who):me._read()},DirReader.prototype.emitEntry=function(entry){this.emit("entry",entry),this.emit("child",entry)};