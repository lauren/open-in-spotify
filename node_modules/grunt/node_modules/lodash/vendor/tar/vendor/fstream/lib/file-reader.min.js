// Basically just a wrapper around an fs.ReadStream
function FileReader(props){var me=this;if(!(me instanceof FileReader))throw new Error("FileReader must be called as constructor.");if(!(props.type==="Link"&&props.Link||props.type==="File"&&props.File))throw new Error("Non-file type "+props.type);me._buffer=[],me._bytesEmitted=0,Reader.call(me,props)}module.exports=FileReader;var fs=require("../../graceful-fs/graceful-fs.js"),fstream=require("../fstream.js"),Reader=fstream.Reader,inherits=require("../../inherits/inherits.js"),mkdir=require("../../mkdirp"),Reader=require("./reader.js"),EOF={EOF:!0},CLOSE={CLOSE:!0};inherits(FileReader,Reader),FileReader.prototype._getStream=function(){var me=this,stream=me._stream=fs.createReadStream(me._path,me.props);me.props.blksize&&(stream.bufferSize=me.props.blksize),stream.on("open",me.emit.bind(me,"open")),stream.on("data",function(c){me._bytesEmitted+=c.length;if(!c.length)return;me._paused||me._buffer.length?(me._buffer.push(c),me._read()):me.emit("data",c)}),stream.on("end",function(){me._paused||me._buffer.length?(me._buffer.push(EOF),me._read()):me.emit("end"),me._bytesEmitted!==me.props.size&&me.error("Didn't get expected byte count\nexpect: "+me.props.size+"\n"+"actual: "+me._bytesEmitted)}),stream.on("close",function(){me._paused||me._buffer.length?(me._buffer.push(CLOSE),me._read()):me.emit("close")}),me._read()},FileReader.prototype._read=function(){var me=this;if(me._paused)return;if(!me._stream)return me._getStream();if(me._buffer.length){var buf=me._buffer;for(var i=0,l=buf.length;i<l;i++){var c=buf[i];c===EOF?me.emit("end"):c===CLOSE?me.emit("close"):me.emit("data",c);if(me._paused){me._buffer=buf.slice(i);return}}me._buffer.length=0}},FileReader.prototype.pause=function(who){var me=this;if(me._paused)return;who=who||me,me._paused=!0,me._stream&&me._stream.pause(),me.emit("pause",who)},FileReader.prototype.resume=function(who){var me=this;if(!me._paused)return;who=who||me,me.emit("resume",who),me._paused=!1,me._stream&&me._stream.resume(),me._read()};